import java.io;
import java.util;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.FileInputStream;
import java.util.StringTokenizer;
class oconnor_lab3
{
	public static void main(String[] args)
	{
		// check the number of commandline arguments
		if( args.length < 2 )
		{
			System.out.println("format: lab3 \"input filename\" \"output filename\" \"<output unique sorted words>\"");
			System.exit(0);
		}
		
		// allocate the DecimalFormat 
		java.text.DecimalFormat df = new java.text.DecimalFormat("###,###,###,###,###");
		
		// define a boolean variable that specifies if the list of unique words needs to be printed to the screen
		boolean outputWords = false;
		if(args.length > 2)
		{
			if(args[2].toLowerCase().startsWith("y") || args[2].toLowerCase().startsWith("t") )
			{
				outputWords = true;
			}
		}
		
		// declare and initialize int to keep track of the number of lines
		int lines = 0;
		
		// declare and initialize int to keep track of the number of words
		int words = 0;
		
		// declare and initialize int to keep track of the number of characters
		int ch = 0;
		
		// try block for all of the work
		try
		{
			// instantiate the BufferedReader for the input file (args[0] is the input filename)
			java.io.BufferedReader input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(args[0])));
			
			// instantiate the PrintWriter for the output file (args[1] is the output filename)
			java.io.PrintWriter output = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(args[1])));
			
			// instantiate the TreeSet of type String for the list of unique words
			TreeSet <String> uniqueStrings = new TreeSet<String>();
			
			// instantiate the ArrayDeque of type String to use to reverse the words of a line of input
			java.util.ArrayDeque<String> stackOfCurrentStrings = new java.util.ArrayDeque<>();
			
			// declare a String for the current line from the input file
			String token;
			
			// while loop to read the input file a line at a time using BufferedReader.readLine()
			while(i=0; BufferedReader.readLine(i); i++)
			{
				// increment the line count
				lines ++;
				
				// create a StringTokenizer for the current line using a blank space delimitter
				//StringTokenizer.myStr.split(\\s+)
				//StringTokenizer st = new StringTokenizer(args[0], "//s+");
				java.util.StringTokenizer st = new java.util.StringTokenizer(inn, " ");

				// while loop over the tokens of the StringTokenizer
				while(st.hasMoreTokens())
				{
					// get the current token (or word)
					token = st.nextToken(); 

					// increment the word count
					words ++;
					
					// increment the character count based on the length of the current token (String.length())
					ch ++;
					
					// add the current token to the ArrayDeque using ArrayDeque.addLast() (adds to top of stack)
					ArrayDeque.addLast(token);
					
					// add the current token to the TreeSet
					uniqueStrings = uniqueStrings + token;
				}
				
				// while loop over the elements of the ArrayDeque, containing the words of the current line of input
				while(i=0; i < stackOfCurrentStrings.size(); i++)
				{
					// use ArrayDeque.removeLast() to get the element from the top of the stack
					String last;
					last = stackOfCurrentStrings.removeLast();
					
					// get a char[] of the characters of the current word using String.toCharArray()
					char [] chArray = String.toCharArray(last);
					
					// use a for loop, to output the elements of the char[] in reverse order
					for(j=0; j < stackOfCurrentStrings.length; j++)
					{
						// output the current symbol using PrintWriter.print(char)
						output.print(chArray[j]);
					}
					
					// if the ArrayDeque is not empty, print a blank space after the current word to the output file
					if(stackOfCurrentStrings != null)
					{
						output.print(" ");
					}
				}
				// output an end of line character to the end of the current line of output to the output file
				output.println("\n");
				
			}
			
			// close the BufferedReader and PrintWriter
			input.close();
			output.close();
			
			// output the number of lines using the DecimalFormat
			System.out.println("Number of Lines:" + df.format(lines));
			
			// output the number of words using the DecimalFormat
			System.out.println("Number of Words:" + df.format(words));
			
			// output the number of characters using the DecimalFormat
			System.out.println("Number of Characters:" + df.format(ch));
			
			// output the number of unique words, size of the TreeSet, using the DecimalFormat
			System.out.println("Number of Unique Words:" + df.format(uWords));
			
			// output the unique list of words to the screen, if requested, using an 
			// enhanced for loop over the elements of the TreeSet
			if(args[2].startsWith("T","t","y","Y"))
			{
				for( String word : uniqueStrings )
				{
					
					// put code here to process the current word
				}
				
				//for(i=0; i < uniqueStrings.length; i++)
				//{
				//	System.out.println(uWords + " ");
				//}
			}
		}
		// catch any exceptions
		catch(Exception e)
		{
			System.out.println(e.toString());
			System.exit(0);
		}
	}
}
